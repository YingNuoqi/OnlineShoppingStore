<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ynq.business.dao.OrderDao">


	<sql id="findListIds">
		WHERE id IN
		<foreach collection="list" item="ids" open="(" separator=","
			close=")">
			#{ids}
		</foreach>
	</sql>

	<sql id="findStringIds">
		WHERE id IN
		<foreach item="item" index="index" collection="array" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</sql>

	<sql id="queryClause">
		where 1=1
		<trim suffixOverrides=",">
			<if test="userId != null and userId != -1L and userId != 0L">
				and USER_ID = #{userId}
			</if>
			<if test="productId != null and productId != -1L and productId != 0L">
				and PRODUCT_ID = #{productId}
			</if>
			<if test="number != null and number != -1L and number != 0L">
				and NUMBER = #{number}
			</if>
			<if test="state != null">
				and STATE = #{state}
			</if>
		</trim>
	</sql>

	<sql id="queryClause2">
		where 1=1
		<trim suffixOverrides=",">
			<if test="userId != null and userId != -1L and userId != 0L">
				and o.USER_ID = #{userId}
			</if>
			<if test="productId != null and productId != -1L and productId != 0L">
				and o.PRODUCT_ID = #{productId}
			</if>
			<if test="number != null and number != -1L and number != 0L">
				and o.NUMBER = #{number}
			</if>
			<if test="state != null and state!=-1 ">
				and o.STATE = #{state}
			</if>
		</trim>
	</sql>

	<sql id="queryClause3">
		where 1=1
		<trim suffixOverrides=",">
			<if test="userId != null and userId != -1L and userId != 0L">
				and userId = #{userId}
			</if>
			<if test="productId != null and productId != -1L and productId != 0L">
				and productId = #{productId}
			</if>
			<if test="number != null and number != -1L and number != 0L">
				and number = #{number}
			</if>
			<if test="state != null and state!=-1 ">
				and state = #{state}
			</if>
		</trim>
	</sql>

	<insert id="add" parameterType="Object">
		insert into tb_order(
		USER_ID,
		PRODUCT_ID,
		NUMBER,
		STATE,
		TIME,
		MEMO)
		values(
		#{userId,jdbcType=NUMERIC},
		#{productId,jdbcType=NUMERIC},
		#{number,jdbcType=VARCHAR},
		#{state,jdbcType=NUMERIC},
		now(),
		#{memo,jdbcType=VARCHAR}
		)
	</insert>


	<update id="update" parameterType="Object">
		update tb_order
		set STATE = #{state,jdbcType=NUMERIC},
		MEMO = #{memo,jdbcType=VARCHAR}
		where id=#{id}
	</update>

	<delete id="deleteById" parameterType="Object">
		delete from tb_order where id=#{id}
	</delete>

	<delete id="deleteByIds" parameterType="Object">
		delete from tb_order
		<include refid="findListIds"></include>
	</delete>

	<delete id="deleteByCondition" parameterType="Object">
		delete from tb_order
		<include refid="queryClause" />
	</delete>

	<select id="queryById" parameterType="Object"
		resultType="com.ynq.business.entity.Order">
		select
		o.ID as id,
		o.USER_ID as userId,
		u.ADDRESS as address,
		u.NUMBER as
		phoneNumber,
		o.PRODUCT_ID as productId,
		p.CATEGORY_ID as categoryId,
		p.PRICE as productPrice,
		o.NUMBER as number,
		o.STATE as state,
		o.MEMO as
		memo,
		o.TIME as time
		from tb_order o
		left join customer u on u.ID=o.USER_ID
		left join product p on p.ID=o.PRODUCT_ID
		where o.id=#{id}
	</select>

	<select id="queryByCondition" parameterType="Object"
		resultType="com.ynq.business.entity.Order">
		select
		o.ID as id,
		o.USER_ID as userId,
		u.ADDRESS as address,
		u.NUMBER as
		phoneNumber,
		o.PRODUCT_ID as productId,
		p.CATEGORY_ID as categoryId,
		p.PRICE as productPrice,
		o.NUMBER as number,
		o.STATE as state,
		o.MEMO as
		memo,
		o.TIME as time
		from tb_order o
		left join customer u on u.ID=o.USER_ID
		left join product p on p.ID=o.PRODUCT_ID
		<include refid="queryClause2" />
	</select>

	<select id="getMaxId" resultType="long">
		SELECT max(ID) from tb_order
	</select>

	<select id="queryCountByCondition" resultType="java.lang.Integer"
		parameterType="Object">
		select count(*) from tb_order
		<include refid="queryClause"></include>
	</select>

	<select id="getOrderListByUserIds" parameterType="Object"
		resultType="com.ynq.business.entity.Order">
		select
		o.ID as id,
		o.USER_ID as userId,
		u.ADDRESS as address,
		u.NUMBER as
		phoneNumber,
		o.PRODUCT_ID as productId,
		p.CATEGORY_ID as categoryId,
		p.PRICE as productPrice,
		o.NUMBER as number,
		o.STATE as state,
		o.MEMO as
		memo,
		o.TIME as time
		from tb_order o
		left join customer u on u.ID=o.USER_ID
		left join product p on p.ID=o.PRODUCT_ID
		where O.USER_ID = #{userId}
	</select>


</mapper>   
